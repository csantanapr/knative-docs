<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knative – Knative articles</title>
    <link>https://knative.dev/blog/articles/</link>
    <description>Recent content in Knative articles on Knative</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://knative.dev/blog/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Orchestrating Events with Knative and Kogito</title>
      <link>https://knative.dev/blog/2020/12/17/orchestrating-events-with-knative-and-kogito/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2020/12/17/orchestrating-events-with-knative-and-kogito/</guid>
      <description>
        
        
        &lt;!--
| Reviewer      | Date          | Approval      |
| ------------- | ------------- | ------------- |
| abrennan89    | 2020-12-09    | :+1:          |
| macruzbar     | 2020-12-14    | :+1:          |
| lberk         | 2020-12-17    | :+1:          |
--&gt;
&lt;p&gt;&lt;a href=&#34;https://kogito.kie.org/&#34;&gt;Kogito&lt;/a&gt; is a platform for the development of cloud-native business automation applications. It is designed targeting cloud-native architectures, and it comes with a series of features to make it easy for architects and developers to create business applications.&lt;/p&gt;
&lt;p&gt;Kogito implements the &lt;a href=&#34;https://github.com/serverlessworkflow/specification&#34;&gt;CNCF Serverless Workflow Project&lt;/a&gt;, which is a specification for defining workflow models that orchestrate event-driven, serverless applications. It focuses on defining a vendor-neutral, platform-independent, and declarative workflow model for orchestrating services that can be used across multiple cloud and container platforms. To date, the Serverless Workflow specification is a CNCF sandbox project.&lt;/p&gt;
&lt;p&gt;As part of the Serverless Workflow implementation, Kogito offers a Kubernetes Operator to deploy these workflows with Knative. The goal is to make it as simple as possible to deploy and manage user-defined workflows in  cloud environments. Knative Eventing plays a very important role in this scenario by providing the underlying infrastructure for event-driven architectures.&lt;/p&gt;
&lt;h3 id=&#34;kogito-serverless-workflow&#34;&gt;Kogito Serverless Workflow&lt;/h3&gt;
&lt;p&gt;To demonstrate how the Kogito workflow implementation works on Knative&amp;rsquo;s event-driven architecture, we will use the &lt;a href=&#34;https://github.com/kiegroup/kogito-examples/tree/master/serverless-workflow-functions-events-quarkus&#34;&gt;patient onboarding example&lt;/a&gt;. In this example, we simulate a workflow used in hospitals to onboard new patients and assign them to the correct doctor.&lt;/p&gt;
&lt;p&gt;The following image taken from the &lt;a href=&#34;https://github.com/serverlessworkflow/specification/tree/main/examples#New-Patient-Onboarding&#34;&gt;specification examples page&lt;/a&gt; illustrates this workflow:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/articles/images/kogito-example-patientonboarding.png&#34; alt=&#34;Patient onboarding workflow representation&#34;&gt;
&lt;em&gt;Patient Onboarding workflow representation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The workflow starts after receiving a &lt;a href=&#34;https://github.com/cloudevents/spec&#34;&gt;CloudEvent&lt;/a&gt; object that contains patient information. Three functions are then called by the spec in a sequence which: (1) stores the patient information, (2) assigns the patient to a doctor based on their symptoms, and (3) schedules an appointment with the assigned doctor for that patient.&lt;/p&gt;
&lt;p&gt;Here is an example of the patient onboarding workflow YAML, based on this specification:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;onboarding&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Patient Onboarding Workflow&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;states&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Onboard&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;onEvents&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;eventRefs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;NewPatientEvent&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;actionMode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sequential&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;actions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;functionRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;refName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StoreNewPatient&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;functionRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;refName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AssignPatientToDoctor&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;functionRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;refName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SchedulePatientAppointment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewPatientEvent&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;new.patient.events&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/hospital/entry&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;functions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StoreNewPatient&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classpath:openapi.json#storeNewPatient&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AssignPatientToDoctor&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;resource&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classpath:openapi.json#assignPatientToDoctor&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SchedulePatientAppointment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;resource&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;classpath:openapi.json#schedulePatientAppointment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above workflow definition is based on three parts. The first part is the &lt;code&gt;states&lt;/code&gt; array, which includes the workflow control flow logic. In this case, is an &lt;code&gt;event&lt;/code&gt;, which receives the new patient cloud event, and performs the three functions mentioned previously.&lt;/p&gt;
&lt;p&gt;The second part of the workflow is the &lt;code&gt;events&lt;/code&gt; array, which contains event definitions that are based on the CloudEvent specification. There is a 1:1 mapping between how the events are defined in the workflows, and how they are represented with the CloudEvent format.&lt;/p&gt;
&lt;p&gt;The third part, the &lt;code&gt;functions&lt;/code&gt; array, contains the function definitions that give more information to the runtime about how to execute the required services.&lt;/p&gt;
&lt;p&gt;Serverless Workflow specification is standards-based and leverages the OpenAPI specification to define details about restful executions of services. &lt;a href=&#34;https://gist.github.com/ricardozanini/5ec66b4ddfbcf8ab40747b28b5f86333&#34;&gt;In this gist&lt;/a&gt;, you can see the OpenAPI file referenced by the functions in the above example.&lt;/p&gt;
&lt;p&gt;You can reference the &lt;a href=&#34;https://github.com/serverlessworkflow/specification/blob/master/specification.md&#34;&gt;Serverless Workflow specification&lt;/a&gt; for information about all language constructs that the specification provides.&lt;/p&gt;
&lt;p&gt;Note that the specification allows for both JSON and YAML workflow formats. This example uses YAML, however JSON is considered equivalent and is also parsable by the runtime.&lt;/p&gt;
&lt;p&gt;During compilation, the Kogito runtime will parse this YAML file and will generate Java code that represents this workflow definition. The generated code is based on the Quarkus framework. The outcome is an OpenAPI standard REST service that can be deployed anywhere in your architecture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/articles/images/kogito-process-workflow-file.png&#34; alt=&#34;Kogito Runtime workflow parse process&#34;&gt;
&lt;em&gt;Kogito Runtime parsing flow&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this example, we have also added the &lt;a href=&#34;https://docs.jboss.org/kogito/release/latest/html_single/#con-knative-eventing_kogito-developing-process-services&#34;&gt;Knative Kogito Eventing plugin&lt;/a&gt; to the project, which means that it can accept CloudEvent objects through HTTP on the root path. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -X POST &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;content-type: application/json&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ce-specversion: 1.0&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ce-source: /hospital/entry&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ce-type: new.patients.events&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ce-id: 12346&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;      -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{ \&amp;#34;name\&amp;#34;: \&amp;#34;Mick\&amp;#34;, \&amp;#34;dateOfBirth\&amp;#34;: \&amp;#34;1983-08-15\&amp;#34;, \&amp;#34;symptoms\&amp;#34;:[\&amp;#34;seizures\&amp;#34;]}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When sending this request to the service, a new instance of the workflow starts, and performs all of the operations defined in the spec.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s much more included in this example. For comprehensive instructions on how to deploy and build it, please see the example page on the &lt;a href=&#34;https://github.com/kiegroup/kogito-examples/tree/master/serverless-workflow-functions-events-quarkus&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;knative-eventing-integration&#34;&gt;Knative Eventing Integration&lt;/h3&gt;
&lt;p&gt;Based on this generated service, you can build &lt;a href=&#34;https://docs.jboss.org/kogito/release/latest/html_single/#proc-kogito-deploying-on-kubernetes_kogito-deploying-on-openshift&#34;&gt;an image&lt;/a&gt; to be deployed with the &lt;a href=&#34;https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-and-cli_kogito-deploying-on-openshift&#34;&gt;Kogito Operator&lt;/a&gt; on a Kubernetes cluster with &lt;a href=&#34;https://knative.dev/docs/eventing/&#34;&gt;Knative Eventing&lt;/a&gt; installed. The Operator will create all the necessary Knative resources to configure this service and subscribe it to the Knative &lt;a href=&#34;https://knative.dev/docs/eventing/broker/&#34;&gt;broker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/articles/images/kogito-knative-eventing-kogito-operator.png&#34; alt=&#34;Knative and Kogito integration&#34;&gt;
&lt;em&gt;Knative Eventing and Kogito Operator integration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Kogito Operator creates a Knative &lt;a href=&#34;https://knative.dev/docs/eventing/triggers/&#34;&gt;Trigger&lt;/a&gt; resource, that links the service and the broker together. In this example, it will filter events of type &lt;code&gt;new.patients.events&lt;/code&gt;. This means that every time a new event of this type comes to the broker, it will be redirected to the Kogito service.&lt;/p&gt;
&lt;p&gt;The same concept also applies to &lt;a href=&#34;https://docs.jboss.org/kogito/release/latest/html_single/#con-knative-eventing_kogito-developing-process-services&#34;&gt;events produced by the workflow engine&lt;/a&gt;. In this case, the operator will create a Knative &lt;a href=&#34;https://knative.dev/docs/eventing/samples/sinkbinding/&#34;&gt;SinkBinding&lt;/a&gt; resource, and will bind it to the Knative broker. Each time an event is produced by the service, a CloudEvent representing it will be sent to the broker. The image below ilustrates the implementation detail of a Kogito service emitting events to the Knative broker via SinkBinding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/articles/images/kogito-knative-impl-producing-event.png&#34; alt=&#34;Knative and Kogito integration&#34;&gt;
&lt;em&gt;Knative Eventing and Kogito service event producers&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The Serverless Workflow specification can help us define complex workflows that can be used across many platforms and cloud providers. In this post, we shared how to use the specification with Kogito and the possibilities of integration with Knative as the serverless platform.&lt;/p&gt;
&lt;p&gt;While the specification implementation is ongoing work on the Kogito project, our goal is to have a platform fully compliant with standards and the specification.&lt;/p&gt;
&lt;p&gt;You can try the &lt;a href=&#34;https://github.com/kiegroup/kogito-examples/tree/master/serverless-workflow-functions-events-quarkus&#34;&gt;example we demonstrated&lt;/a&gt; in this article in your local environment. If you are looking for a more sophisticated scenario, take a look at our &lt;a href=&#34;https://github.com/kiegroup/kogito-examples/tree/master/serverless-workflow-github-showcase&#34;&gt;Github Bot example with Kogito and Knative Eventing&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;To get to know more about the Serverless Workflow specification, we recommend reading the &lt;a href=&#34;https://github.com/serverlessworkflow/specification/blob/master/specification.md&#34;&gt;specification document&lt;/a&gt; in the Github repository and also to join the community!&lt;/p&gt;
&lt;p&gt;To understand more about Knative Eventing and how the platform can help you create an event-driven architecture on Kubernetes, &lt;a href=&#34;https://knative.dev/docs/eventing/#functionality&#34;&gt;please take a look at the official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;about-the-authors&#34;&gt;About the Authors&lt;/h2&gt;
&lt;p&gt;Ricardo Zanini is a Software Engineer currently working on Kogito Community project. Has has been working in the field of software engineering since 2000. He is a maintainer of the CNCF Serverless Workflow Specification.&lt;/p&gt;
&lt;p&gt;Tihomir Surdilovic is a Software Developer at Red Hat working on business automation. He has been involved in business automation and open source since 2008. He also serves as an active lead of the CNCF Serverless Workflow Specification.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Orchestrating CloudEvents (with Knative and Zeebe)</title>
      <link>https://knative.dev/blog/2020/10/10/orchestrating-cloudevents-with-knative-and-zeebe/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2020/10/10/orchestrating-cloudevents-with-knative-and-zeebe/</guid>
      <description>
        
        
        &lt;p&gt;A couple of weeks ago, I presented at the &lt;strong&gt;Knative Meetup&lt;/strong&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=msDDdqmyEFA&amp;amp;list=PLQjzPfIiEQLIEpoCPxBYAVrjqy6LxLtQ8&#34;&gt;Video&lt;/a&gt;, &lt;a href=&#34;https://www.slideshare.net/salaboy/orchestrating-cloud-events-knative-meetup-2020&#34;&gt;Slides&lt;/a&gt;) about how you can leverage the Cloud Native workflow engine &lt;a href=&#34;http://zeebe.io&#34;&gt;Zeebe&lt;/a&gt; to understand, enhance and orchestrate your applications that are already using &lt;a href=&#34;https://cloudevents.io&#34;&gt;CloudEvents&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to expand a bit on how these tools can help you gain a deeper understanding of how your distributed applications are working.&lt;/p&gt;
&lt;p&gt;You can find the Demo application, installation instructions, and some videos of the application and the tools in action on &lt;a href=&#34;https://github.com/salaboy/orchestrating-cloud-events/&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The application that I built consists of four microservices that use &lt;a href=&#34;https://cloudevents.io/&#34;&gt;CloudEvents&lt;/a&gt; to communicate and perform the typical (happy path) flow of the application: &lt;strong&gt;“Buy Concert Tickets”&lt;/strong&gt;. Each service runs as Knative Service using Knative Eventing for exchanging messages with other services.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-service-knative.png?raw=true&#34; alt=&#34;Knative Application&#34;&gt;&lt;/p&gt;
&lt;p&gt;The application heavily relies on Knative Eventing as all the services emit events to the broker and register &lt;a href=&#34;https://github.com/salaboy/customer-waiting-room-app/blob/master/charts/customer-waiting-room-app/templates/ktriggers.yaml#L1&#34;&gt;Knative Triggers (Subscriptions)&lt;/a&gt; to the events that they are interested in.&lt;/p&gt;
&lt;p&gt;The following events are being emitted by the application for every single user who wants to buy tickets on our website:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-events.png?raw=true&#34; alt=&#34;Application Events&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that this Cloud Native application uses &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket#:~:text=WebSocket%20is%20a%20computer%20communications,being%20standardized%20by%20the%20W3C.&#34;&gt;WebSockets&lt;/a&gt;, which adds an extra layer of complexity when you think about scaling it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even if you have tracing (with something like &lt;a href=&#34;https://opentracing.io&#34;&gt;OpenTracing&lt;/a&gt; and a centralized logging system, understanding what is going on inside your event-driven applications is quite tricky. Think about it like this &amp;ndash; lets say we have only 10 customers trying to buy tickets at once, understanding where each customer is in the process, or where potential bottlenecks are appearing is challenging.&lt;/p&gt;
&lt;p&gt;Until this point, this is just a normal Knative application and, because you are using Knative Eventing which natively supports CloudEvents, you can integrate more tools to the ecosystem as you will see in the next section.&lt;/p&gt;
&lt;h2 id=&#34;visualize--understand&#34;&gt;Visualize / Understand&lt;/h2&gt;
&lt;p&gt;Without changing anything inside the application code or setup, you can tap into the event stream and map the events that are meaningful for your customer journey and visualize them using &lt;a href=&#34;http://zeebe.io&#34;&gt;Zeebe&lt;/a&gt; and &lt;a href=&#34;https://camunda.com/products/cloud/&#34;&gt;Camunda Operate&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-service-knative-zeebe.png?raw=true&#34; alt=&#34;Knative and Zeebe&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can start simply by creating a workflow model that consumes the events emitted by the application to report status, as the following model shows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v1.png?raw=true&#34; alt=&#34;Workflow model v1&#34;&gt;&lt;/p&gt;
&lt;p&gt;This simple workflow model waits for the application events and moves the flow forward when each event arrives. And yes, you guessed it, it works with &lt;strong&gt;CloudEvents&lt;/strong&gt; :).&lt;/p&gt;
&lt;p&gt;For each customer that joins the queue to buy tickets, a new workflow instance is created to keep track of them. Having these instances allows you to track individual customers and quickly understand where everyone is at a given point in time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v1-operate-1.png?raw=true&#34; alt=&#34;workflow model instances&#34;&gt;&lt;/p&gt;
&lt;p&gt;Zeebe comes with Camunda Operate, which allows you to see all this information in almost real-time and have a detailed audit trail about the workflow execution and the data associated with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v1-operate-2.png?raw=true&#34; alt=&#34;Operate UI&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;decorate--enhance&#34;&gt;Decorate / Enhance&lt;/h2&gt;
&lt;p&gt;Now that you have the power of a workflow engine, you can leverage some of its features to decorate or enhance your applications. An ehnchanced version of the workflow model could look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v2.png?raw=true&#34; alt=&#34;Workflow model v2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now when the customer reaches the &lt;strong&gt;Payment Sent&lt;/strong&gt; state, meaning that they have already made a reservation, the model waits for the &lt;strong&gt;Payment Sent&lt;/strong&gt; CloudEvent to arrive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v2-timers.png?raw=true&#34; alt=&#34;timers&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see above, two timer boundary events have been associated with the &lt;strong&gt;Payment Sent&lt;/strong&gt; state. The bottom one, with dashed lines, is a non-interrupting event, meaning that it will not disrupt the actual flow, it will be just triggered in a fire-and-forget fashion. This results in the Payment Reminder being sent and, because it can be configured as a recurring timer, it will trigger every X amount of time (for the presentation this was set to 10 seconds).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-push-notification-websocket.png?raw=true&#34; alt=&#34;Websockets push notification&#34;&gt;&lt;/p&gt;
&lt;p&gt;The above image shows the notification on the frontend, which was generated by the workflow engine, routed to the website backend and forwarded using WebSockets to the website frontend in the customer browser.&lt;/p&gt;
&lt;p&gt;The top one, with solid lines, is an interrupting event, meaning that it will cause the normal flow of the model to be discarded and continue only to the steps defined from the timer (in this case, &lt;strong&gt;Reservation Time Out&lt;/strong&gt;). For this scenario, the interrupting timer is set to be triggered after X amount of time after the tickets&#39; reservation was made (for the presentation, this was set to 2 minutes). After the reservation times out, the website redirects the customer back to the beginning.&lt;/p&gt;
&lt;p&gt;For both timers, you get full traceability (e.g. when and how often they were triggered). You can see these details graphically in &lt;strong&gt;Operate&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v2-timers-operate.png?raw=true&#34; alt=&#34;Workflow model v2 in Operate&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see that the non-interrupting timer was triggered several times, generating payment reminders in the frontend. Even if we don’t implement the frontend notifications, you can use these timers to measure and classify how much time it actually takes your customer to make the payment. This can be really useful to classify different categories; for example, how much time it takes, on average, for people to provide payment details.&lt;/p&gt;
&lt;p&gt;A big difference between these timers and &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&#34;&gt;Cronjobs (for example in Kubernetes)&lt;/a&gt; is that these timers are contextual to the state that they are associated with, meaning that as soon as the &lt;strong&gt;Payment Sent&lt;/strong&gt; CloudEvent is received, both timers are automatically cancelled and garbage collected. For this particular scenario, you want notifications about the payment to be sent but also make sure the reservation doesn’t time out if the payment was sent. The workflow engine deals with these very common requirements in a transparent way for the user who is interested in registering time-based events as part of their applications.&lt;/p&gt;
&lt;h2 id=&#34;orchestrate&#34;&gt;Orchestrate&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Payment Reminder&lt;/strong&gt; and &lt;strong&gt;Reservation Time Out&lt;/strong&gt; status, shown in the model above, represent when we cross the line from simply listening to events to actually emitting CloudEvents from a workflow model. Now the workflow model is not only helping you to visualize and understand what your Cloud Native applications are doing but driving and interacting with your services.&lt;/p&gt;
&lt;p&gt;While using a workflow engine to orchestrate CloudEvents, you have a bunch of new tools at your fingertips to deal with more complex scenarios.&lt;/p&gt;
&lt;p&gt;Version 3 of the Workflow Model shows a more complex diagram, where a subprocess can be used to group a set of states together. By doing so, you can quickly identify stages inside your workflows, as well as register events for these stages such as timers or message events.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v3.png?raw=true&#34; alt=&#34;Workflow Model V3&#34;&gt;&lt;/p&gt;
&lt;p&gt;The worfklow can react on the CloudEvent &lt;strong&gt;Customer Abandoned Queue&lt;/strong&gt; at any given time inside the &lt;strong&gt;Customer Buying Tickets&lt;/strong&gt; stage. This will trigger the Customer &lt;strong&gt;Clean Up&lt;/strong&gt; event to garbage collect all the data related with the Customer Session from all the services caching data.&lt;/p&gt;
&lt;p&gt;In the following screenshot, inside Camunda Operate, you can quickly visualize how many instances of the workflows are at a given stage as well as how many workflows have finished, and in which state they finished:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v3-operate-stage.png?raw=true&#34; alt=&#34;Workflow Model V3 in Operate&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another advantage of using a workflow engine is flow control. By using flow control elements such as Exclusive Gateways, you can delegate some high-level decisions (usually encoding business logic) to the workflow engine:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v4.png?raw=true&#34; alt=&#34;Workfloe Model V4&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the above model, the exclusive gateway is being used to choose between two different paths based on a condition. In this case, the condition is evaluating how many tickets are being reserved by the customer and, based on that, the model is choosing between a normal credit card payment or a more complex money transfer.&lt;/p&gt;
&lt;h2 id=&#34;architecture--next-steps&#34;&gt;Architecture &amp;amp; Next Steps&lt;/h2&gt;
&lt;p&gt;From an architectural perspective, the integration between the Workflow Engine and Knative is quite simple. It relies on &lt;strong&gt;CloudEvents&lt;/strong&gt; and a component that is in charge to route the events to the right workflows, and the other way around.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/zeebe-io/zeebe-cloud-events-router&#34;&gt;Zeebe CloudEvents Router&lt;/a&gt; is in charge of exposing an endpoint where events can be forwarded and, at the same time, understand where to push events from workflow models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-service-knative-zeebe-detailed.png?raw=true&#34; alt=&#34;Knative and Zeebe Detailed&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the above diagram, the &lt;strong&gt;Zeebe CloudEvents Router&lt;/strong&gt; is not alone. The &lt;a href=&#34;https://github.com/zeebe-io/zeebe-operator&#34;&gt;Zeebe Operator&lt;/a&gt;, in charge of provisioning or connecting to remote Workflow Engines, has the capacity to deploy and manage workflow definitions. This means that it can parse and understand if a workflow model emits or consume cloud events, information that can be used to dynamically provision &lt;a href=&#34;https://knative.dev/docs/eventing/channels/&#34;&gt;Knative Channels&lt;/a&gt; and create &lt;a href=&#34;https://knative.dev/docs/eventing/triggers/&#34;&gt;Knative Triggers&lt;/a&gt; for each model, as it is being done in &lt;a href=&#34;https://knative.dev/docs/eventing/flows/&#34;&gt;Knative Flow (Sequence and Parallel)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, for version 1 of our workflow model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/salaboy/orchestrating-cloud-events/blob/master/imgs/tickets-v1.png?raw=true&#34; alt=&#34;Workflow Model V1&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following Knative Triggers are created:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: router-queue-join-trigger
  namespace: default
spec:
  broker: default
  filter:
    attributes:
      type: Queue.CustomerJoined
  subscriber:
    uri: http://zeebe-cloud-events-router.default.svc.cluster.local/message

---
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: router-queue-exit-trigger
  namespace: default
spec:
  broker: default
  filter:
    attributes:
      type: Queue.CustomerExited
  subscriber:
    uri: http://zeebe-cloud-events-router.default.svc.cluster.local/message

---
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: router-tickets-reserved-trigger
  namespace: default
spec:
  broker: default
  filter:
    attributes:
      type: Tickets.Reserved
  subscriber:
    uri: http://zeebe-cloud-events-router.default.svc.cluster.local/message

---
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: router-tickets-payment-sent-trigger
  namespace: default
spec:
  broker: default
  filter:
    attributes:
      type: Tickets.PaymentSent
  subscriber:
    uri: http://zeebe-cloud-events-router.default.svc.cluster.local/message

---
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: router-tickets-payment-authorized-trigger
  namespace: default
spec:
  broker: default
  filter:
    attributes:
      type: Tickets.PaymentsAuthorized
  subscriber:
    uri: http://zeebe-cloud-events-router.default.svc.cluster.local/message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As mentioned before, further integrations should deal with more advanced topologies at the messaging layer. For example, being able to logically group workflow models to use a dedicated &lt;a href=&#34;https://knative.dev/docs/eventing/channels/&#34;&gt;Knative Channel&lt;/a&gt; and &lt;a href=&#34;https://github.com/zeebe-io/zeebe-cloud-events-router&#34;&gt;Zeebe CloudEvents Router&lt;/a&gt;. In future releases, the Zeebe Operator will be aware of the CloudEvents Router to provision and manage the Knative and CloudEvents integration.&lt;/p&gt;
&lt;h2 id=&#34;sum-up&#34;&gt;Sum up&lt;/h2&gt;
&lt;p&gt;In this blog post, I’ve spent some time describing the wonders of what you can do with a Workflow Engine like Zeebe on top of Knative Applications. I’ve personally had a lot of fun while working with Knative, as the abstractions provided helped me to build a very robust application that I can move to different cloud providers easily, without changing any of my services.
Watch this demo live here:

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/msDDdqmyEFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

The projects and the integration shown in this blog post are in active development, so if you are interested or want to get involved please reach out via twitter: &lt;a href=&#34;http://twitter.com/salaboy&#34;&gt;@salaboy&lt;/a&gt; or join our slack channel: &lt;a href=&#34;http://zeebe-io.slack.com&#34;&gt;zeebe-io.slack.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to run this demo in your own Kubernetes Cluster you can find the instructions here: &lt;a href=&#34;https://github.com/salaboy/orchestrating-cloud-events/&#34;&gt;https://github.com/salaboy/orchestrating-cloud-events/&lt;/a&gt; and if you feel like giving the repository a star we will appreciate it :)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Event-driven Image and BigQuery processing pipelines with Knative on Google Cloud</title>
      <link>https://knative.dev/blog/2020/06/19/event-driven-image-and-bigquery-processing-pipelines-with-knative-on-google-cloud/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2020/06/19/event-driven-image-and-bigquery-processing-pipelines-with-knative-on-google-cloud/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post, I will outline two event-driven processing pipelines that I
recently built with Knative Eventing. Along the way, I will explain event sources,
custom events and other components provided by Knative, that greatly simplify the
development of event-driven architectures.&lt;/p&gt;
&lt;p&gt;Both of these pipelines are available on GitHub, including source code, configurations, and detailed
instructions, as part of my &lt;a href=&#34;https://github.com/meteatamel/knative-tutorial&#34;&gt;Knative Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;knative-components-used&#34;&gt;Knative components used&lt;/h2&gt;
&lt;p&gt;When creating these example pipelines, I relied on a few Knative components that greatly simplified
my development. More specifially:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://knative.dev/docs/eventing/sources/&#34;&gt;Event sources&lt;/a&gt; allow you to
read external events in your cluster. &lt;a href=&#34;https://github.com/google/knative-gcp#knative-gcp-sources&#34;&gt;Knative-GCP
Sources&lt;/a&gt; provide a
number of eventing sources ready to read events from various Google Cloud
sources.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knative.dev/docs/eventing/broker/&#34;&gt;Broker and triggers&lt;/a&gt; provide
event delivery without producers or consumers needing to know about how the
events are routed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom events and event replies&lt;/strong&gt;: In Knative, all events are
&lt;a href=&#34;https://cloudevents.io/&#34;&gt;CloudEvents&lt;/a&gt;, so it&amp;rsquo;s useful to have a standard format
for events and various SDKs to read/write them. Knative supports
custom events and event replies. Any service can receive an event, do some
processing, create a custom event with new data, and reply back to the broker
so that other services can read the custom event. This is useful in pipelines,
where each service does a little bit of work and passes the message forward to the next service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;image-processing-pipeline&#34;&gt;Image Processing Pipeline&lt;/h2&gt;
&lt;p&gt;In this image processing pipeline example, users upload an image to a storage
bucket on Google Cloud, process the image with a number of different Knative
services, and save the processed image to an output bucket.&lt;/p&gt;
&lt;p&gt;I defined two requirements for the pipeline:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Uploaded images are filtered before they are sent
through the pipeline. For example, no adult themed or violent images are allowed.&lt;/li&gt;
&lt;li&gt;The pipeline can contain any number of processing services that can be added or
removed as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;architecture&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;This section explains the architecture of the image processing pipeline. The pipeline is deployed to
Google Kubernetes Engine (GKE) on Google Cloud.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://atamel.dev/img/2020/image-processing-pipeline.png&#34; alt=&#34;Image processing pipeline architecture&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An image is saved to an input Cloud Storage bucket.&lt;/li&gt;
&lt;li&gt;A Cloud Storage update event is read into Knative by
&lt;a href=&#34;https://github.com/google/knative-gcp/blob/master/docs/examples/cloudstoragesource/README.md&#34;&gt;CloudStorageSource&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A filter service receives the Cloud Storage event. It uses the Vision API to
determine whether the image is safe or should be filtered. If the image is safe, the filter service creates a custom CloudEvent of
type &lt;code&gt;dev.knative.samples.fileuploaded&lt;/code&gt; and passes it back to the broker.&lt;/li&gt;
&lt;li&gt;The resizer service receives the &lt;code&gt;fileuploaded&lt;/code&gt; event, and then resizes the image using the
&lt;a href=&#34;https://github.com/SixLabors/ImageSharp&#34;&gt;ImageSharp&lt;/a&gt; library. The service then saves the
resized image to the output bucket, creates a custom CloudEvent of type
&lt;code&gt;dev.knative.samples.fileresized&lt;/code&gt;, and passes the event back to the broker.&lt;/li&gt;
&lt;li&gt;The watermark service receives the &lt;code&gt;fileresized&lt;/code&gt; event, adds a watermark to the
image using the &lt;a href=&#34;https://github.com/SixLabors/ImageSharp&#34;&gt;ImageSharp&lt;/a&gt; library, and
saves the image to the output bucket.&lt;/li&gt;
&lt;li&gt;The labeler receives the &lt;code&gt;fileuploaded&lt;/code&gt; event, extracts labels from the image using the
Vision API, and saves the labels to the output bucket.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;test-the-pipeline&#34;&gt;Test the pipeline&lt;/h3&gt;
&lt;p&gt;To test the pipeline, I uploaded a picture from my favorite beach,
Ipanema in Rio de Janeiro, to the bucket:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://atamel.dev/img/2020/beach.jpg&#34; alt=&#34;Beach with sunset&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a few seconds, I saw 3 files in my output bucket:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gsutil ls gs://knative-atamel-images-output

gs://knative-atamel-images-output/beach-400x400-watermark.jpeg
gs://knative-atamel-images-output/beach-400x400.png
gs://knative-atamel-images-output/beach-labels.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see the labels &lt;code&gt;Sky,Body of water,Sea,Nature,Coast,Water,Sunset,Horizon,Cloud,Shore&lt;/code&gt; in the text file, and
the resized and watermarked image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://atamel.dev/img/2020/beach-400x400-watermark.jpeg&#34; alt=&#34;Beach with sunset&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;bigquery-processing-pipeline&#34;&gt;BigQuery Processing Pipeline&lt;/h2&gt;
&lt;p&gt;This pipeline example is a schedule driven pipeline, which queries
and finds the daily number of COVID-19 cases for the UK and Cyprus. I used a public COVID-19
dataset on BigQuery to get the data, generate charts, and send myself one
email for each country, once a day, containing those charts.&lt;/p&gt;
&lt;h3 id=&#34;architecture-1&#34;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the architecture of the pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://atamel.dev/img/2020/bigquery-processing-pipeline.png&#34; alt=&#34;BigQuery processing pipeline architecture&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I setup two &lt;code&gt;CloudSchedulerSources&lt;/code&gt; for two countries (United Kingdom and
Cyprus) to call the &lt;code&gt;QueryRunner&lt;/code&gt; service once a day.&lt;/li&gt;
&lt;li&gt;The QueryRunner service receives the scheduler events for the UK and Cyprus,
queries COVID-19 cases for each of them using BigQuery&amp;rsquo;s public
COVID-19 data set, and saves the results in a separate BigQuery table. After this is
done, the QueryRunner service returns a custom CloudEvent of type
&lt;code&gt;dev.knative.samples.querycompleted&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The ChartCreator service receives the &lt;code&gt;querycompleted&lt;/code&gt;
CloudEvent, creates a chart from BigQuery data using &lt;code&gt;Matplotlib&lt;/code&gt;, and saves it to
a Cloud Storage bucket.&lt;/li&gt;
&lt;li&gt;The notifier service is another receives the
&lt;code&gt;com.google.cloud.storage.object.finalize&lt;/code&gt; CloudEvent from the bucket through a
CloudStorageSource, and sends an email notification to users using SendGrid.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;test-the-pipeline-1&#34;&gt;Test the pipeline&lt;/h3&gt;
&lt;p&gt;The CloudSchedulerSource creates CloudScheduler jobs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcloud scheduler &lt;span style=&#34;color:#204a87&#34;&gt;jobs&lt;/span&gt; list

ID                                                  LOCATION      SCHEDULE &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;TZ&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;          TARGET_TYPE  STATE
cre-scheduler-2bcb33d8-3165-4eca-9428-feb99bc320e2  europe-west1  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt; * * * &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;UTC&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;       Pub/Sub      ENABLED
cre-scheduler-714c0b82-c441-42f4-8f99-0e2eac9a5869  europe-west1  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;17&lt;/span&gt; * * * &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;UTC&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;       Pub/Sub      ENABLED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trigger the jobs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcloud scheduler &lt;span style=&#34;color:#204a87&#34;&gt;jobs&lt;/span&gt; run cre-scheduler-2bcb33d8-3165-4eca-9428-feb99bc320e2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should get an email with with a chart similar to this in a few minutes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://atamel.dev/img/2020/chart-unitedkingdom.png&#34; alt=&#34;Chart - United Kingdom&#34;&gt;&lt;/p&gt;
&lt;p&gt;This wraps up my post. As I already mentioned, if you want more detailed instructions,
you can check out
&lt;a href=&#34;https://github.com/meteatamel/knative-tutorial/blob/master/docs/image-processing-pipeline.md&#34;&gt;image-processing-pipeline&lt;/a&gt;
and
&lt;a href=&#34;https://github.com/meteatamel/knative-tutorial/blob/master/docs/bigquery-processing-pipeline.md&#34;&gt;bigquery-processing-pipeline&lt;/a&gt;
as part of my &lt;a href=&#34;https://github.com/meteatamel/knative-tutorial&#34;&gt;Knative Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have questions/comments, feel free to reach out to me on Twitter &lt;a href=&#34;https://twitter.com/meteatamel&#34;&gt;@meteatamel&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;By &lt;a href=&#34;https://twitter.com/meteatamel&#34;&gt;Mete Atamel&lt;/a&gt; - Developer Advocate, Google Cloud&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Getting started with Knative Eventing using Bitcoin transaction data</title>
      <link>https://knative.dev/blog/2020/05/01/getting-started-with-knative-eventing-using-bitcoin-transaction-data/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2020/05/01/getting-started-with-knative-eventing-using-bitcoin-transaction-data/</guid>
      <description>
        
        
        &lt;p&gt;I’ve been exploring &lt;a href=&#34;https://knative.dev/docs/eventing/&#34;&gt;Knative Eventing&lt;/a&gt;, a system that enables a cloud native eventing ecosystem to be easily deployed through the use of &lt;strong&gt;event producers&lt;/strong&gt; and &lt;strong&gt;event consumers.&lt;/strong&gt; Most of the work on this demo has been done in version 0.11, and I have also run it in version 0.13, and now it also works on version 0.15.&lt;/p&gt;
&lt;p&gt;This demo was presented at the first Knative Community Meetup, so you can also watch the video version here:

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/sGi_LuAaaT0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;I put together a simple demo to explore some of the key advantages of event-driven architectures, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Push-based messaging.&lt;/li&gt;
&lt;li&gt;Decoupling of producers and consumers.&lt;/li&gt;
&lt;li&gt;Apply business logic while data is in motion.&lt;/li&gt;
&lt;li&gt;Real time event-streams for data science — millisecond decisions e.g fraud detection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I’ll show you how to get an example eventing scenario up and running using some of the basic Knative eventing components; &lt;strong&gt;Broker, Trigger, producer&lt;/strong&gt; and &lt;strong&gt;consumer.&lt;/strong&gt; This demo shows streaming events in real-time, in-stream transformation, and push-based front-ends in action. You can use this as a basis and build out, exploring further with what is possible.&lt;/p&gt;
&lt;p&gt;This scenario uses Bitcoin transaction events as an example of an event stream. The events will be displayed in real-time via and UI front-end and also classified into sizes by another service based on their total transaction value.&lt;/p&gt;
&lt;p&gt;In the diagram below, you can see a plan of what we will deploy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/images/knative-eventing-scenario.png&#34; alt=&#34;Diagram of this example Knative Eventing scenario&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is a github repository to accompany this demo &lt;a href=&#34;https://github.com/josiemundi/knative-eventing-blockchain-demo&#34;&gt;here&lt;/a&gt;. The source code for all of the individual services is available in the github repo. If you want to use the pre-built images from Docker hub then you will only need the files in the yaml directory.&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-the-namespace-and-create-a-broker&#34;&gt;Step 1: Create the Namespace and create a Broker&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 001-namespace.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first step is to deploy the 001-namespace.yaml, which creates a kubernetes namespace and automatically adds the label knative-eventing-injection=enabled. This creates a Knative Eventing &lt;strong&gt;broker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Broker&lt;/strong&gt; is where events are sent to from an event-source or &lt;strong&gt;producer.&lt;/strong&gt; It may be backed as a messaging channel, which by default is in-memory but can be something else (like a Kafka channel). From here they can be consumed by those services that are interested.&lt;/p&gt;
&lt;h2 id=&#34;step-2-deploy-the-bitcoin-event-source&#34;&gt;Step 2: Deploy the Bitcoin event-source&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 010-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our &lt;strong&gt;event-source&lt;/strong&gt; is an application that takes (unconfirmed Bitcoin transaction) messages from the &lt;a href=&#34;https://www.blockchain.com/api/api_websocket&#34;&gt;blockchain.info websocket&lt;/a&gt; and then creates a new &lt;a href=&#34;https://cloudevents.io/&#34;&gt;CloudEvent.&lt;/a&gt; This is our producer of events and it &lt;em&gt;produces&lt;/em&gt; events that other services &lt;em&gt;may or may not&lt;/em&gt; be interested in subscribing to.&lt;/p&gt;
&lt;p&gt;In our case we tell it where we want it to send the events, using the &lt;strong&gt;sink&lt;/strong&gt; variable. The sink is passed in as an environmental variable in the deployment and, in this case, it is our Broker address. To get the Broker url, you can use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get broker -n knative-eventing-websocket-source
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have deployed the event-source, you can verify it is running by getting the logs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl —namespace knative-eventing-websocket-source logs -l app=wseventsource — tail=100 -f
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-3-subscribe-event-display-to-the-bitcoin-events&#34;&gt;Step 3: Subscribe event-display to the Bitcoin events&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 040-trigger.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A &lt;strong&gt;Trigger&lt;/strong&gt; provides a filter which selects events matching certain attributes to deliver to the specified service. There are three Triggers specified for this scenario. The subscribing service does not need to be deployed yet in order for you to set up a Trigger.&lt;/p&gt;
&lt;h2 id=&#34;step-4-deploy-our-consuming-services&#34;&gt;Step 4: Deploy our Consuming Services&lt;/h2&gt;
&lt;p&gt;In our scenario we have &lt;em&gt;multiple&lt;/em&gt; &lt;strong&gt;consumers.&lt;/strong&gt; These are the services that are interested (or not) in the events. There are three consuming services that we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;event-display&lt;/strong&gt; — Kubernetes deployment subscribed to events that are from “wss://ws.blockchain.info/inv”. This service takes these events and then displays them in real-time via a UI front-end. This service is a Kubernetes service.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 050-kubernetesdeploy.yaml
kubectl apply -f 060-kubernetesservice.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have deployed this service you can head to localhost:31234 with your web browser and you should see the bitcoin transaction events rendering in real-time in the UI:
&lt;img src=&#34;../../blog/images/knative-eventing-UI-real-time.png&#34; alt=&#34;You should see this UI updating in real-time&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;classifier&lt;/strong&gt; — subscribed to events that are from “wss://ws.blockchain.info/inv”. This service takes the events and then classifies each transaction value. In the application code, a new CloudEvent is created with a new &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;source.&lt;/strong&gt; These new events are emitted back out into the Knative eventing ecosystem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../blog/images/knative-eventing-classifier.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The logic has been kept simple and there are only two size classes; &lt;em&gt;small&lt;/em&gt; and &lt;em&gt;large.&lt;/em&gt; It represents an example of an in-stream transformation or modelling application that could be happening as part of a data science or ML process. This type of architecture can be used for fraud detection, anomaly detection and other decisions where speed is critical.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 031-classifier-service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;test-display&lt;/strong&gt; — Knative service subscribed to events that are from the &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;source&lt;/strong&gt; ‘classifier’.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f 030-test-display-service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This service subscribes to the events that contain the size of the transaction so we can see these when we view the logs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl logs -l serving.knative.dev/service=test-display -c user-container — tail=100 -n knative-eventing-websocket-source -f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../../blog/images/knative-eventing-test-display.png&#34; alt=&#34;Our test-display service consumes the size reply that is emitted by the classifier&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Give the demo a whirl and &lt;a href=&#34;https://twitter.com/developing4data&#34;&gt;let me know&lt;/a&gt; how you get on!&lt;/p&gt;
&lt;p&gt;If you want to learn more, then you can check out some other examples in the &lt;a href=&#34;https://knative.dev/docs/eventing/samples/&#34;&gt;Knative docs.&lt;/a&gt; The &lt;a href=&#34;https://developers.redhat.com/books/knative-cookbook/?v=1&#34;&gt;‘Knative Cookbook’&lt;/a&gt; is another great resource for learning more about Knative Serving and Eventing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Knative v0.3 Autoscaling — A Love Story</title>
      <link>https://knative.dev/blog/2019/03/27/knative-v0.3-autoscaling-a-love-story/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2019/03/27/knative-v0.3-autoscaling-a-love-story/</guid>
      <description>
        
        
        
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;article class=&#34;h-entry&#34;&gt;
    &lt;section data-field=&#34;subtitle&#34; class=&#34;p-summary&#34;&gt;
      Scaling in the Knative v0.3 release includes new options for customizing the autoscaling subsystem. From a batteries-included…
    &lt;/section&gt;
    &lt;section data-field=&#34;body&#34; class=&#34;e-content&#34;&gt;
      &lt;section name=&#34;f67c&#34; class=&#34;section section--body section--first section--last&#34;&gt;
        &lt;div class=&#34;section-divider&#34;&gt;
          &lt;hr class=&#34;section-divider&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;section-content&#34;&gt;
          &lt;div class=&#34;section-inner sectionLayout--insetColumn&#34;&gt;
            &lt;h3 name=&#34;1b46&#34; id=&#34;1b46&#34; class=&#34;graf graf--h3 graf--leading graf--title&#34;&gt;Knative v0.3 Autoscaling — A Love Story&lt;/h3&gt;
            &lt;p name=&#34;9627&#34; id=&#34;9627&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;Scaling in the Knative v0.3 release includes new options for customizing the autoscaling subsystem. From a batteries-included, scale-to-zero default, to an ability to replace the autoscaling system entirely, and everything in between. PodAutoscaler, the new custom resource in Knative, provides an extension and control point with which to configure your application.&lt;/p&gt;
            &lt;p name=&#34;045a&#34; id=&#34;045a&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;To illustrate these options, let’s walk through the evolution of a Web application from inception to complex autoscaling. We promise, “Knative Autoscaling will grow old with you.”&lt;/p&gt;
            &lt;h3 name=&#34;2645&#34; id=&#34;2645&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;I just wanna keep it simple&lt;/h3&gt;
            &lt;p name=&#34;e70a&#34; id=&#34;e70a&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;One morning, you sit bolt upright in bed struck by the realization that what people really want… is love. You write a quick Web application to apply a heart-shaped watermark to any given image in just the right place. Since you’re a savvy, modern application developer, you drop it in a container and spin it up on a Knative Service on GKE with `gcloud run deploy — image gcr.io/joe-does-knative/love`.&lt;/p&gt;
            &lt;p name=&#34;55ba&#34; id=&#34;55ba&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;This is what your Knative Service looks like:&lt;/p&gt;
            &lt;figure name=&#34;986d&#34; id=&#34;986d&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 334px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;img class=&#34;graf-image&#34; data-width=&#34;1574&#34; data-height=&#34;752&#34; src=&#34;../../../../articles/images/1_F-mOzMbo-Yy2XWTSgJkfQA.png&#34;&gt;
              &lt;/div&gt;
            &lt;/figure&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;a160&#34; id=&#34;a160&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;You show it to your BFF and they post it on Hacker News. Voila, you’re on the front page of the hacker’s Internet! HN tries to give you the hug-of-death, but your application and cluster scales up to handle 1000 op/s of traffic seamlessly. After a while, the excitement dies down and your service is getting 1 or 2 requests per hour. Luckily, Knative scales to zero Pods when not in use, so you don’t spend money running an idle process. And you never changed anything after the initial deployment! That was simple.&lt;/p&gt;
          &lt;figure name=&#34;75df&#34; id=&#34;75df&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 520px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-image-id=&#34;gopher&#34; data-width=&#34;800&#34; data-height=&#34;594&#34; src=&#34;../../../../articles/images/gopher.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;figcaption&gt;
            &lt;small&gt;Original image: &lt;a href=&#34;https://cheezburger.com/7892518656/gopher-love&#34;&gt;https://cheezburger.com/7892518656/gopher-love&lt;/a&gt;
            &lt;/small&gt;
          &lt;/figcaption&gt;
          &lt;h3 name=&#34;cc2e&#34; id=&#34;cc2e&#34; class=&#34;graf graf--h3 graf-after--figure&#34;&gt;Please don’t go away&lt;/h3&gt;
          &lt;p name=&#34;dc4d&#34; id=&#34;dc4d&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;Several weeks later, lightning strikes again and you realize… “I could make money doing this”. Clearly people enjoyed the heart-shaped watermarks. Maybe you could let people use your service to watermark images on their entire website! Adding a quick in-memory cache in front of your Ruby script (yeah, it’s Ruby) you redeploy and then start advertising your product as a general image-processing service. Things are going well, but you quickly realize that your traffic is unpredictable — it bursts a lot. And when the service scales to 0 Pods and later the traffic resumes, you spend the first few minutes building up the cache again, which makes request latency a little too high. So you decide to add an annotation to your Knative Service’s Revision template to maintain at least 2 Pods at all times.&lt;/p&gt;
          &lt;p name=&#34;1828&#34; id=&#34;1828&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;This is what your Knative Service looks like now:&lt;/p&gt;
          &lt;figure name=&#34;cb2d&#34; id=&#34;cb2d&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 425px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;1578&#34; data-height=&#34;958&#34; src=&#34;../../../../articles/images/1_BkMXQfMrRERP_n04_C7geQ.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;c288&#34; id=&#34;c288&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Things aren’t scaling to zero. But that’s fine because you’re making a little money from the venture.&lt;/p&gt;
          &lt;h3 name=&#34;6915&#34; id=&#34;6915&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;Things are heating up&lt;/h3&gt;
          &lt;p name=&#34;8920&#34; id=&#34;8920&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;Woah! Traffic is starting to ramp up. You’re averaging about 500 op/s and running between 10 and 50 Pods depending on the time of day. You’ve noticed that this job is mostly CPU-bound and you’re not utilizing all your resources as efficiently as you could. So you make some adjustments to the default autoscaling target:&lt;/p&gt;
          &lt;figure name=&#34;51a1&#34; id=&#34;51a1&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 175px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;1520&#34; data-height=&#34;380&#34; src=&#34;../../../../articles/images/1_O6ZSdCeotT7J4zSbDNIsYw.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;68f8&#34; id=&#34;68f8&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;But eventually you conclude that you just need to scale on CPU to keep your machines hot. So you choose a different Knative autoscaling class entirely. The class annotation will tell Knative to use a different PodAutoscaler controller implementation, kinda like Kubernetes Ingress.&lt;/p&gt;
          &lt;p name=&#34;cdaa&#34; id=&#34;cdaa&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;Here is your Knative Service now:&lt;/p&gt;
          &lt;figure name=&#34;1d64&#34; id=&#34;1d64&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 378px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;2010&#34; data-height=&#34;1084&#34; src=&#34;../../../../articles/images/1_fSxikLtB7TNsV-6Y3u5g2w.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;3827&#34; id=&#34;3827&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Running at 60% CPU consistently you’re actually starting to make more money than you’re spending! So you quit your day job to pursue heart-shaped watermarking full time.&lt;/p&gt;
          &lt;h3 name=&#34;cfd7&#34; id=&#34;cfd7&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;Let’s get serious&lt;/h3&gt;
          &lt;p name=&#34;5397&#34; id=&#34;5397&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;Things are getting complicated. Seeking professional help, you hire Dr. Mark to help you run your service operations. One of the first things he implements is rollout mode for your service. No more leaping before you look!&lt;/p&gt;
          &lt;figure name=&#34;3d05&#34; id=&#34;3d05&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 462px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;2000&#34; data-height=&#34;1320&#34; src=&#34;../../../../articles/images/1_znzl9nGKIif51YRwmBw_BA.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;d2e5&#34; id=&#34;d2e5&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Things are smooth sailing with Dr. Mark at the helm! As the weeks roll on, New Year’s Eve approaches and you start seeing non-linear growth in your metrics. A quick consultation with Dr. Mark confirms your worst fears. People go crazy sending each other pictures with hearts on New Year’s Eve. And they do it &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;all at the same time&lt;/strong&gt; like they are coordinating a DDOS attack of love. You’re going to need a plan.&lt;/p&gt;
          &lt;p name=&#34;eb80&#34; id=&#34;eb80&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;Luckily, Dr. Mark has been doing his reading in the Knative Serving release notes and begins experimenting with editing the PodAutoscaler on pre-existing Knative Revisions. The PodAutoscaler is where Knative keeps its autoscaling state and configuration for a Knative Revision. And unlike the Knative Revision, it’s mutable (on purpose). You make a plan to ramp up capacity slightly ahead of traffic as it builds to each NYE event across the globe (yeah, it happens 24 times!)&lt;/p&gt;
          &lt;figure name=&#34;2941&#34; id=&#34;2941&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 303px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;2360&#34; data-height=&#34;1022&#34; src=&#34;../../../../articles/images/1_OwJCCIaSFFSE1Rv6ZPuTBQ.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;0f7a&#34; id=&#34;0f7a&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Over the course of the evening, New Year’s marches from timezone to timezone. You see a few minutes of errors on the first NYE event because the CPU target of 60% is too high. But after you adjust it down to 40% for the next event, it’s smooth sailing for the rest of the evening. Hooray! 🎉&lt;/p&gt;
          &lt;h3 name=&#34;45d7&#34; id=&#34;45d7&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;You’re so special&lt;/h3&gt;
          &lt;p name=&#34;f604&#34; id=&#34;f604&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;It’s been a full year and things have been crazy! You’ve done some deep integrations with several major image hosting websites and they are driving like 80% of your traffic and revenue now. With a little time on your hands, you start analyzing your autoscaling statistics. You realize that traffic observed by your upstream referrers almost &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;perfectly&lt;/strong&gt; predicts your traffic patterns. And they can give you those metrics through your API integration!&lt;/p&gt;
          &lt;p name=&#34;b6dd&#34; id=&#34;b6dd&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;But you have implemented your CI/CD pipeline to work with Knative. And all your operational experience is in running Knative workloads. It would be a shame to throw all that out just to implement your own autoscaling algorithm. But then you remember something Dr. Mark said way back when he started looking in to Knative v0.3. With the PodAutoscaler custom resource, you can implement &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;your own reconciler and autoscaling system&lt;/strong&gt; without changing anything else about the Knative Serving system. Well, there you go!&lt;/p&gt;
          &lt;p name=&#34;b5d8&#34; id=&#34;b5d8&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;A quick copy of a Kubernetes sample-controller and you’ve implemented a reconciler that operates on your own class of Knative PodAutoscaler. It queries upstream metrics to scale predictively.&lt;/p&gt;
          &lt;p name=&#34;7af8&#34; id=&#34;7af8&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;This is what you have to change in your Knative Service to wire it up:&lt;/p&gt;
          &lt;figure name=&#34;d26a&#34; id=&#34;d26a&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 465px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-width=&#34;2012&#34; data-height=&#34;1336&#34; src=&#34;../../../../articles/images/1_Ec5KvL9ux3AvlMFJ6liiDw.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;ddb3&#34; id=&#34;ddb3&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Wow. Controllers and autoscalers are hard to write. But it’s a core problem for your business and you’ve got it up and running. And you didn’t have to touch all the other stuff that wasn’t related to this particular autoscaling problem. As you think on how Knative has grown with your business over the last couple years, you just gotta say “I got options, but Knative … you’re the top one!”&lt;/p&gt;
          &lt;h3 name=&#34;b13d&#34; id=&#34;b13d&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;What happened?&lt;/h3&gt;
          &lt;p name=&#34;98d5&#34; id=&#34;98d5&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;To learn more about how the PodAutoscaler works and the options that Knative autoscaling has, please watch the Kubecon talk &lt;a href=&#34;https://youtu.be/OPSIPr-Cybs&#34; data-href=&#34;https://youtu.be/OPSIPr-Cybs&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Knative: Scaling From 0 to Infinity&lt;/a&gt; and checkout the code on &lt;a href=&#34;https://github.com/josephburnett/kubecon18&#34; data-href=&#34;https://github.com/josephburnett/kubecon18&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. Or play around with the Knative Serving &lt;a href=&#34;../../../../../docs/serving/samples/autoscale-go&#34; target=&#34;_blank&#34;&gt;autoscaling sample&lt;/a&gt;.&lt;/p&gt;
          &lt;p name=&#34;2ee4&#34; id=&#34;2ee4&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;This is where the PodAutoscaler sits in relation to the other Knative entities:&lt;/p&gt;
          &lt;figure name=&#34;d41a&#34; id=&#34;d41a&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 394px;&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
              &lt;/div&gt;
              &lt;img class=&#34;graf-image&#34; data-image-id=&#34;principled-objects&#34; data-width=&#34;960&#34; data-height=&#34;540&#34; data-is-featured=&#34;true&#34; src=&#34;../../../../../images/principled-objects.png&#34;&gt;
            &lt;/div&gt;
          &lt;/figure&gt;
          &lt;p name=&#34;f11d&#34; id=&#34;f11d&#34; class=&#34;graf graf--p graf--empty graf-after--figure graf--trailing&#34;&gt;
            &lt;br&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
  &lt;/section&gt;
  &lt;footer&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://medium.com/p/e32a27b7855&#34;&gt;View original.&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;Exported from &lt;a href=&#34;https://medium.com&#34;&gt;Medium&lt;/a&gt; on March 27, 2019.&lt;/p&gt;
  &lt;/footer&gt;
&lt;/article&gt;
&lt;/body&gt;
&lt;/html&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: ko: fast Kubernetes microservice development in Go</title>
      <link>https://knative.dev/blog/2018/12/18/ko-fast-kubernetes-microservice-development-in-go/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2018/12/18/ko-fast-kubernetes-microservice-development-in-go/</guid>
      <description>
        
        
        
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;article class=&#34;h-entry&#34;&gt;
    &lt;section data-field=&#34;body&#34; class=&#34;e-content&#34;&gt;
      &lt;section name=&#34;f298&#34; class=&#34;section section--body section--first section--last&#34;&gt;
        &lt;div class=&#34;section-content&#34;&gt;
          &lt;div class=&#34;section-inner sectionLayout--insetColumn&#34;&gt;
            &lt;p name=&#34;23c9&#34; id=&#34;23c9&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt;I originally wrote &lt;/em&gt;
              &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt; to help Knative developers. I was prompted to write this introductory post by the positive feedback from the community, including an IBM booth talk on &lt;/em&gt;
              &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt; during recent Kubecon Seattle 2018. I hope you enjoy using &lt;/em&gt;
              &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt; as much as we do, and I look forward to your feedback on &lt;/em&gt;
              &lt;a href=&#34;https://slack.knative.dev/&#34; data-href=&#34;https://slack.knative.dev&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;
                &lt;em class=&#34;markup--em markup--p-em&#34;&gt;slack.knative.dev&lt;/em&gt;
              &lt;/a&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt;.&lt;/em&gt;
            &lt;/p&gt;
            &lt;p name=&#34;33fe&#34; id=&#34;33fe&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;Over the past few years, there has been a lot of hype about containers. Docker, Kubernetes and related technology have taken the public cloud by storm (pun intended). At the same time, it seems, as software projects grow increasingly more complex, so too does the development process.&lt;/p&gt;
            &lt;p name=&#34;f9cf&#34; id=&#34;f9cf&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
              &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;What starts as:&lt;/strong&gt;
            &lt;/p&gt;
            &lt;figure name=&#34;3e51&#34; id=&#34;3e51&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 191px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;div data-width=&#34;884&#34; data-height=&#34;241&#34; data-action=&#34;zoom&#34; data-scroll=&#34;native&#34;&gt;
                  &lt;img src=&#34;../../../../articles/images/singleservice.png&#34;&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/figure&gt;
            &lt;p name=&#34;e2b9&#34; id=&#34;e2b9&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;
              &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Quickly becomes:&lt;/strong&gt;
            &lt;/p&gt;
            &lt;figure name=&#34;487b&#34; id=&#34;487b&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 247px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;div data-width=&#34;976&#34; data-height=&#34;344&#34; data-action=&#34;zoom&#34; data-scroll=&#34;native&#34;&gt;
                  &lt;img src=&#34;../../../../articles/images/multipleservices.png&#34;&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/figure&gt;
            &lt;p name=&#34;f0f9&#34; id=&#34;f0f9&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;Tools such as &lt;a href=&#34;https://github.com/googlecontainerTools/skaffold&#34; data-href=&#34;https://github.com/googlecontainerTools/skaffold&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;skaffold&lt;/a&gt; can wrap this process for arbitrary languages and Dockerfiles to make it easier to manage (and faster), but you still need to write &lt;a href=&#34;https://xitonix.io/containerised-go-services/&#34; data-href=&#34;https://xitonix.io/containerised-go-services/&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;
              &lt;em class=&#34;markup--em markup--p-em&#34;&gt;artisanal hand-crafted Dockerfiles&lt;/em&gt;
            &lt;/a&gt;, and typically need to write &lt;em class=&#34;markup--em markup--p-em&#34;&gt;more&lt;/em&gt; yaml (or other) to tell the tooling how to orchestrate this (e.g. what gets pushed where?):&lt;/p&gt;
            &lt;figure name=&#34;890d&#34; id=&#34;890d&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 354px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;div data-width=&#34;944&#34; data-height=&#34;477&#34; data-action=&#34;zoom&#34; data-scroll=&#34;native&#34;&gt;
                  &lt;img src=&#34;../../../../articles/images/scaffold.png&#34;&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/figure&gt;
            &lt;p name=&#34;60fe&#34; id=&#34;60fe&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;
              &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
              &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt; takes a different approach that leans into Go idioms to eliminate configuration.&lt;/strong&gt;
            &lt;/p&gt;
            &lt;p name=&#34;295b&#34; id=&#34;295b&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;One such Go idiom is that binaries are referenced by “&lt;a href=&#34;https://golang.org/doc/code.html#ImportPaths&#34; data-href=&#34;https://golang.org/doc/code.html#ImportPaths&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;import paths&lt;/a&gt;”; a typical way of installing a Go binary would be:&lt;/p&gt;
            &lt;pre name=&#34;c44e&#34; id=&#34;c44e&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;# e.g. installing ko itself&lt;br&gt;go get github.com/google/go-containerregistry/cmd/ko&lt;/pre&gt;
            &lt;p name=&#34;2114&#34; id=&#34;2114&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;Getting started with &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt; does not take any additional configuration files, you simply replace references to container images with import paths:&lt;/p&gt;
            &lt;pre name=&#34;9af3&#34; id=&#34;9af3&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;# This example is based on:&lt;br&gt;# &lt;a href=&#34;https://github.com/google/ko/blob/master/cmd/ko/test/test.yaml&#34; target=&#34;_blank&#34;&gt;https://github.com/google/ko/blob/master/cmd/ko/test/test.yaml&lt;/a&gt;
              &lt;br&gt;apiVersion: v1&lt;br&gt;kind: Pod&lt;br&gt;metadata:&lt;br&gt;  name: kodata&lt;br&gt;spec:&lt;br&gt;  containers:&lt;br&gt;  - name: test&lt;br&gt;    # ko builds and publishes this Go binary, and replaces this&lt;br&gt;    # with an image name.&lt;br&gt;    image: github.com/google/go-containerregistry/cmd/ko/test&lt;br&gt;  restartPolicy: Never&lt;/pre&gt;
              &lt;p name=&#34;b28f&#34; id=&#34;b28f&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;That’s it.&lt;/p&gt;
              &lt;p name=&#34;7e1e&#34; id=&#34;7e1e&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
                &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;How do I consume this with &lt;/strong&gt;
                &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
                &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;?&lt;/strong&gt;
              &lt;/p&gt;
              &lt;p name=&#34;ec8c&#34; id=&#34;ec8c&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
                &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt; also needs to know where the user wants to publish their images. This is defined outside of the yaml manifest as generally each developer on your team will use their own.&lt;/p&gt;
                &lt;p name=&#34;d4f3&#34; id=&#34;d4f3&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;For example, developing on Knative, I use this in my&amp;nbsp;&lt;code class=&#34;markup--code markup--p-code&#34;&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt;
                &lt;pre name=&#34;2fb5&#34; id=&#34;2fb5&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;export KO_DOCKER_REPO=gcr.io/mattmoor-private/ko&lt;/pre&gt;
                &lt;p name=&#34;ffa1&#34; id=&#34;ffa1&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;
                  &lt;em class=&#34;markup--em markup--p-em&#34;&gt;NOTE: for DockerHub users (and possibly others), this should be: &lt;/em&gt;
                  &lt;code class=&#34;markup--code markup--p-code&#34;&gt;docker.io/username&lt;/code&gt;
                  &lt;em class=&#34;markup--em markup--p-em&#34;&gt; as DockerHub does not support multi-level repository names.&lt;/em&gt;
                &lt;/p&gt;
                &lt;p name=&#34;9850&#34; id=&#34;9850&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;After that, the command-line interface is modeled after &lt;code class=&#34;markup--code markup--p-code&#34;&gt;kubectl&lt;/code&gt;:&lt;/p&gt;
                &lt;pre name=&#34;f438&#34; id=&#34;f438&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;ko apply -f directory/ -f file.yaml&lt;/pre&gt;
                &lt;p name=&#34;7f81&#34; id=&#34;7f81&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;This will have the same net effect as &lt;code class=&#34;markup--code markup--p-code&#34;&gt;kubectl apply&lt;/code&gt;, but it will also build, containerize, and publish the Go microservices referenced from the yamls as well, with significantly less configuration:&lt;/p&gt;
                &lt;figure name=&#34;98dd&#34; id=&#34;98dd&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
                  &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 673px; max-height: 469px;&#34;&gt;
                    &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                    &lt;/div&gt;
                  &lt;div data-width=&#34;673&#34; data-height=&#34;469&#34; data-action=&#34;zoom&#34; data-scroll=&#34;native&#34;&gt;
                    &lt;img src=&#34;../../../../articles/images/koservices.png&#34;&gt;
                  &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/figure&gt;
                &lt;p name=&#34;6c5e&#34; id=&#34;6c5e&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;You only write Kubernetes yamls and code. No Dockerfiles, no Makefiles. You run one command and your latest code is running.&lt;/p&gt;
                &lt;p name=&#34;05d4&#34; id=&#34;05d4&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;Following the above example (trimmed for width):&lt;/p&gt;
                &lt;pre name=&#34;d031&#34; id=&#34;d031&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;~/go/src/github.com/google/go-containerregistry&lt;br&gt;$ ko apply -f cmd/ko/test/test.yaml &lt;br&gt;Using base .. for github.com/google/go-containerregistry/cmd/ko/test&lt;br&gt;Publishing gcr.io/mattmoor-public/test-01234abcd:latest&lt;br&gt;mounted blob: sha256:deadbeef&lt;br&gt;mounted blob: sha256:baadf00d&lt;br&gt;pushed blob sha256:deadf00d&lt;br&gt;pushed blob sha256:baadbeef&lt;br&gt;pushed blob sha256:beeff00d&lt;br&gt;gcr.io/mattmoor-public/test-01234abcd:latest: digest: ... size: 915&lt;br&gt;Published gcr.io/mattmoor-public/test-01234abcd@...&lt;br&gt;pod/kodata created&lt;/pre&gt;
                &lt;pre name=&#34;7e57&#34; id=&#34;7e57&#34; class=&#34;graf graf--pre graf-after--pre&#34;&gt;~/go/src/github.com/google/go-containerregistry$ kubectl get pods&lt;br&gt;NAME     READY   STATUS      RESTARTS   AGE&lt;br&gt;kodata   0/1     Completed   0          1&lt;/pre&gt;
                &lt;p name=&#34;ca88&#34; id=&#34;ca88&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;
                  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Just the image&lt;/strong&gt;
                &lt;/p&gt;
                &lt;p name=&#34;faaa&#34; id=&#34;faaa&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;The simplest trick that &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt; supports is to simply containerize and publish an image. One neat thing about this is that it works with most Go binaries without any knowledge of &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;.&lt;/p&gt;
                &lt;p name=&#34;a1ee&#34; id=&#34;a1ee&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;For example (trimmed for width):&lt;/p&gt;
                &lt;pre name=&#34;d560&#34; id=&#34;d560&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;~/go/src/golang.org/x/tools&lt;br&gt;$ ko publish ./cmd/goimports/&lt;br&gt;Using base .. for golang.org/x/tools/cmd/goimports&lt;br&gt;Publishing gcr.io/mattmoor-public/goimports-01234:latest&lt;br&gt;mounted blob: sha256:deadbeef&lt;br&gt;mounted blob: sha256:baadf00d&lt;br&gt;mounted blob: sha256:deadf00d&lt;br&gt;pushed blob sha256:baadbeef&lt;br&gt;pushed blob sha256:beeff00d&lt;br&gt;gcr.io/mattmoor-public/goimports-01234:latest: digest: ... size: 914&lt;br&gt;Published gcr.io/mattmoor-public/goimports-01234@...&lt;/pre&gt;
                &lt;p name=&#34;7282&#34; id=&#34;7282&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;
                  &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;
                  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt; is for releases too!&lt;/strong&gt;
                &lt;/p&gt;
                &lt;p name=&#34;bf39&#34; id=&#34;bf39&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;You can also use &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt; to publish things for redistribution via:&lt;/p&gt;
                &lt;pre name=&#34;5309&#34; id=&#34;5309&#34; class=&#34;graf graf--pre graf-after--p&#34;&gt;# This does everything `apply` does except it pipes to&lt;br&gt;# stdout instead of kubectl&lt;br&gt;ko resolve -f config/ &amp;gt; release.yaml&lt;/pre&gt;
                &lt;pre name=&#34;8b07&#34; id=&#34;8b07&#34; class=&#34;graf graf--pre graf-after--pre&#34;&gt;# Later...&lt;br&gt;kubectl apply -f release.yaml&lt;/pre&gt;
                &lt;p name=&#34;dec5&#34; id=&#34;dec5&#34; class=&#34;graf graf--p graf-after--pre&#34;&gt;For example, we use this to release all of the Knative components.&lt;/p&gt;
                &lt;p name=&#34;d074&#34; id=&#34;d074&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
                  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Try it out, and tell us what you think.&lt;/strong&gt;
                &lt;/p&gt;
                &lt;p name=&#34;20d1&#34; id=&#34;20d1&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;This just scratches the surface of what you can do with &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt;, and what &lt;code class=&#34;markup--code markup--p-code&#34;&gt;ko&lt;/code&gt; does for you. For more information check out the &lt;a href=&#34;https://github.com/google/go-containerregistry/blob/master/cmd/ko/README.md&#34; data-href=&#34;https://github.com/google/go-containerregistry/blob/master/cmd/ko/README.md&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;README.md&lt;/a&gt;. If you have questions: #ko on &lt;a href=&#34;https://slack.knative.dev/&#34; data-href=&#34;https://slack.knative.dev&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;slack.knative.dev&lt;/a&gt;, or reach me on &lt;a href=&#34;https://twitter.com/mattomata&#34; data-href=&#34;https://twitter.com/mattomata&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;nofollow noopener&#34; target=&#34;_blank&#34;&gt;Twitter @mattomata&lt;/a&gt;.&lt;/p&gt;
                &lt;p name=&#34;3bc2&#34; id=&#34;3bc2&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
                  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Some Common Pitfalls&lt;/strong&gt;
                &lt;/p&gt;
                &lt;p name=&#34;0941&#34; id=&#34;0941&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;A couple of things to be careful of with ko because of how heavily it relies on convention:&lt;/p&gt;
                &lt;ol class=&#34;postList&#34;&gt;
                  &lt;li name=&#34;184e&#34; id=&#34;184e&#34; class=&#34;graf graf--li graf-after--p&#34;&gt;
                    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;You need to be on &lt;/strong&gt;
                    &lt;code class=&#34;markup--code markup--li-code&#34;&gt;
                      &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;${GOPATH}&lt;/strong&gt;
                    &lt;/code&gt; or it will not know what package you are in.&lt;/li&gt;
                    &lt;li name=&#34;11b1&#34; id=&#34;11b1&#34; class=&#34;graf graf--li graf-after--li graf--trailing&#34;&gt;
                      &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Typos are the worst.&lt;/strong&gt; Because &lt;code class=&#34;markup--code markup--li-code&#34;&gt;ko&lt;/code&gt; is insensitive to schemas, it will ignore any string that is not the import path of a “main” package, so if you have a simple typo in your import path then it will be left as is and you will likely see your Pod &lt;code class=&#34;markup--code markup--li-code&#34;&gt;ErrImagePull&lt;/code&gt;.&lt;/li&gt;
                &lt;/ol&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/section&gt;
      &lt;/section&gt;
      &lt;footer&gt;
        &lt;p&gt;By &lt;a href=&#34;https://medium.com/@mattmoor&#34; class=&#34;p-author h-card&#34;&gt;Matthew Moore&lt;/a&gt; on &lt;a href=&#34;https://medium.com/knative/ko-fast-kubernetes-microservice-development-in-go-f94a934a7240&#34;&gt;
          &lt;time class=&#34;dt-published&#34;&gt;December 18, 2018&lt;/time&gt;
        &lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/article&gt;
  &lt;/body&gt;
&lt;/html&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Build, deploy, manage modern serverless workloads using Knative on Kubernetes</title>
      <link>https://knative.dev/blog/2018/11/14/build-deploy-manage-modern-serverless-workloads-using-knative-on-kubernetes/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/2018/11/14/build-deploy-manage-modern-serverless-workloads-using-knative-on-kubernetes/</guid>
      <description>
        
        
        
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;article class=&#34;h-entry&#34;&gt;
    &lt;section data-field=&#34;description&#34; class=&#34;p-summary&#34;&gt;
      By now, Kubernetes should be the default target for your deployments. Yes, there are still use-cases where Kubernetes is not the optimal…
    &lt;/section&gt;
    &lt;section data-field=&#34;body&#34; class=&#34;e-content&#34;&gt;
      &lt;section name=&#34;f298&#34; class=&#34;section section--body section--first section--last&#34;&gt;
        &lt;div class=&#34;section-divider&#34;&gt;
          &lt;hr class=&#34;section-divider&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;section-content&#34;&gt;
          &lt;div class=&#34;section-inner sectionLayout--insetColumn&#34;&gt;
            &lt;p name=&#34;6981&#34; id=&#34;6981&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;By now, &lt;a href=&#34;https://kubernetes.io/&#34; data-href=&#34;https://kubernetes.io/&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Kubernetes&lt;/a&gt; should be the default target for your deployments. Yes, there are still use-cases where Kubernetes is not the optimal choice, but these represent an increasingly smaller number of modern workloads.&lt;/p&gt;
            &lt;p name=&#34;c063&#34; id=&#34;c063&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;The main value of Kubernetes is that it greatly abstracts much of the infrastructure management pain. The broad support amongst virtually all major Cloud Service Providers (CSP) also means that your workloads are portable. Combined with the already vibrant ecosystem of Kubernetes-related tools, means that the experience of the operator, the person responsible for managing Kubernetes, is now pretty smooth.&lt;/p&gt;
            &lt;blockquote name=&#34;c1ac&#34; id=&#34;c1ac&#34; class=&#34;graf graf--blockquote graf-after--p&#34;&gt;But what about the experience of the developer, the person who builds solutions on top of Kubernetes?&lt;/blockquote&gt;
            &lt;p name=&#34;09a5&#34; id=&#34;09a5&#34; class=&#34;graf graf--p graf-after--blockquote&#34;&gt;Despite what some might tell you, Kubernetes is not yet today’s application server. For starters, the act of developing, deploying and managing services on Kubernetes is still too complicated. Yes, there are many open source projects for logging, monitoring, integration, etc., but, even if you put these together just right, the experience of developing on Kubernetes is still fragile and way too labour-intensive.&lt;/p&gt;
            &lt;p name=&#34;1312&#34; id=&#34;1312&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;As if that wasn’t enough, the growing popularity of functions as the atomic unit of code development further contributes to the overall complexity. Often creating different development patterns on two disconnected surface areas:one for functions (FaaS) and one for applications (PaaS).&lt;/p&gt;
            &lt;p name=&#34;3f53&#34; id=&#34;3f53&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;As the result, developers today are being forced to worry about infrastructure-related concerns: such as, image building, registry publishing, deployment services, load balancing, logging, monitoring, and scaling. However, what all they really want to do is write code.&lt;/p&gt;
            &lt;h3 name=&#34;33f0&#34; id=&#34;33f0&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;Introducing Knative&lt;/h3&gt;
            &lt;figure name=&#34;69ac&#34; id=&#34;69ac&#34; class=&#34;graf graf--figure graf--layoutOutsetLeft graf-after--h3&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 410px; max-height: 322px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;img class=&#34;graf-image&#34; data-image-id=&#34;knative.png&#34; data-width=&#34;410&#34; data-height=&#34;322&#34; src=&#34;../../../../images/knative.png&#34;&gt;
              &lt;/div&gt;
            &lt;/figure&gt;
            &lt;p name=&#34;aa9b&#34; id=&#34;aa9b&#34; class=&#34;graf graf--p graf-after--figure&#34;&gt;At Google Cloud Next in San Francisco this week, Google announced an early preview of the GKE serverless add-on (&lt;a href=&#34;http://g.co/serverlessaddon&#34; data-href=&#34;http://g.co/serverlessaddon&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;g.co/serverlessaddon&lt;/a&gt;). Google also open-sourced Knative (kay-nay-tiv), the project that powers the serverless add-on (&lt;a href=&#34;https://github.com/knative&#34; data-href=&#34;https://github.com/knative&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;github.com/knative&lt;/a&gt;).&lt;/p&gt;
            &lt;p name=&#34;7c8f&#34; id=&#34;7c8f&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;Knative implements many of the learnings from Google. The open source project already has contributions from companies like Pivotal, IBM, Red Hat and SAP and collaboration with open-source Function-as-a-Service framework communities like &lt;a href=&#34;https://github.com/apache/incubator-openwhisk&#34; data-href=&#34;https://github.com/apache/incubator-openwhisk&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;OpenWhisk&lt;/a&gt;, &lt;a href=&#34;https://github.com/projectriff/riff&#34; data-href=&#34;https://github.com/projectriff/riff&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;riff&lt;/a&gt;, and &lt;a href=&#34;https://github.com/kyma-project&#34; data-href=&#34;https://github.com/kyma-project&#34; class=&#34;markup--anchor markup--p-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Kyma&lt;/a&gt; who either replatform on to Knative or consume one or more components from the Knative project.&lt;/p&gt;
            &lt;figure name=&#34;ca72&#34; id=&#34;ca72&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
              &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 440px;&#34;&gt;
                &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                &lt;/div&gt;
                &lt;img class=&#34;graf-image&#34; data-image-id=&#34;0*v-wKOVy6dsJdbABA&#34; data-width=&#34;1600&#34; data-height=&#34;1005&#34; data-is-featured=&#34;true&#34; src=&#34;../../../../images/audience.png&#34;&gt;
              &lt;/div&gt;
              &lt;figcaption class=&#34;imageCaption&#34;&gt;Knative audience&lt;/figcaption&gt;
            &lt;/figure&gt;
            &lt;blockquote name=&#34;15c2&#34; id=&#34;15c2&#34; class=&#34;graf graf--blockquote graf-after--figure&#34;&gt;Knative helps developers build, deploy, and manage modern serverless workloads on Kubernetes.&lt;/blockquote&gt;
            &lt;p name=&#34;b4e2&#34; id=&#34;b4e2&#34; class=&#34;graf graf--p graf-after--blockquote&#34;&gt;It provides a set of building blocks that enable modern, source-centric and container-based development workloads on Kubernetes:&lt;/p&gt;
            &lt;ul class=&#34;postList&#34;&gt;
              &lt;li name=&#34;5f0a&#34; id=&#34;5f0a&#34; class=&#34;graf graf--li graf-after--p&#34;&gt;
                &lt;a href=&#34;https://github.com/knative/build&#34; data-href=&#34;https://github.com/knative/build&#34; class=&#34;markup--anchor markup--li-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Build&lt;/a&gt; — Source-to-container build orchestration&lt;/li&gt;
                &lt;li name=&#34;c06f&#34; id=&#34;c06f&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                  &lt;a href=&#34;https://github.com/knative/eventing&#34; data-href=&#34;https://github.com/knative/eventing&#34; class=&#34;markup--anchor markup--li-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Eventing&lt;/a&gt; — Management and delivery of events&lt;/li&gt;
                  &lt;li name=&#34;b148&#34; id=&#34;b148&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                    &lt;a href=&#34;https://github.com/knative/serving&#34; data-href=&#34;https://github.com/knative/serving&#34; class=&#34;markup--anchor markup--li-anchor&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Serving&lt;/a&gt; — Request-driven compute that can scale to zero&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p name=&#34;abed&#34; id=&#34;abed&#34; class=&#34;graf graf--p graf-after--li&#34;&gt;Knative documentation provides instructions on &lt;a href=&#34;../../../../../docs/install/&#34;&gt;how to install&lt;/a&gt; it on hosted Kubernetes offering like &lt;a href=&#34;../../../../../docs/install/knative-with-gke&#34;&gt;Google Cloud Platform&lt;/a&gt; or &lt;a href=&#34;../../../../../docs/install/knative-with-iks&#34;&gt;IBM&lt;/a&gt;, and on-prem Kubernetes installations, like the one offered by &lt;a href=&#34;../../../../../docs/install/knative-with-pks&#34;&gt;Pivotal&lt;/a&gt;. Finally, Knative repository also includes &lt;a href=&#34;../../../../../docs/install/getting-started-knative-app&#34;&gt;samples and how-to instructions&lt;/a&gt; to get you started developing on Kubernetes.&lt;/p&gt;
                  &lt;h3 name=&#34;0113&#34; id=&#34;0113&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;Knative Overview&lt;/h3&gt;
                  &lt;p name=&#34;e295&#34; id=&#34;e295&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;Knative is based on the premise of clear separation of concerns. It allows developers and operators to reason about the workload development, deployment, and management by defining primitive objects in a form of Custom Resource Definitions (CRDs) which extend on the object model found in Kubernetes.&lt;/p&gt;
                  &lt;figure name=&#34;de3e&#34; id=&#34;de3e&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
                    &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 431px;&#34;&gt;
                      &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                      &lt;/div&gt;
                      &lt;img class=&#34;graf-image&#34; data-image-id=&#34;0*hfyRGyNWNFycw5bx&#34; data-width=&#34;740&#34; data-height=&#34;456&#34; src=&#34;../../../../images/primitive-objects.png&#34;&gt;
                    &lt;/div&gt;
                    &lt;figcaption class=&#34;imageCaption&#34;&gt;Knative defines primitives with clear separation of concerns&lt;/figcaption&gt;
                  &lt;/figure&gt;
                  &lt;ul class=&#34;postList&#34;&gt;
                    &lt;li name=&#34;2cb6&#34; id=&#34;2cb6&#34; class=&#34;graf graf--li graf-after--figure&#34;&gt;
                      &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Configuration&lt;/strong&gt; — is the desired state for your service, both code and configuration&lt;/li&gt;
                      &lt;li name=&#34;5be3&#34; id=&#34;5be3&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                        &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Revision&lt;/strong&gt; — represents an immutable point-in-time snapshot of your code and configuration&lt;/li&gt;
                        &lt;li name=&#34;8193&#34; id=&#34;8193&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                          &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Route&lt;/strong&gt; — assigns traffic to a revision or revisions of your service&lt;/li&gt;
                          &lt;li name=&#34;269b&#34; id=&#34;269b&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                            &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Service &lt;/strong&gt;— is the combined lite version of all the above objects to enable simple use cases&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p name=&#34;6ed0&#34; id=&#34;6ed0&#34; class=&#34;graf graf--p graf-after--li&#34;&gt;In addition to these objects, Knative also defines principle objects for eventing… you know, because serverless. Knative decouples event producers and consumers and implements CNCF CloudEvents (v0.1) to streamline event processing.&lt;/p&gt;
                          &lt;figure name=&#34;6396&#34; id=&#34;6396&#34; class=&#34;graf graf--figure graf-after--p&#34;&gt;
                            &lt;div class=&#34;aspectRatioPlaceholder is-locked&#34; style=&#34;max-width: 700px; max-height: 559px;&#34;&gt;
                              &lt;div class=&#34;aspectRatioPlaceholder-fill&#34;&gt;
                              &lt;/div&gt;
                              &lt;img class=&#34;graf-image&#34; data-image-id=&#34;0*3jjrwXWgze2pPhnm&#34; data-width=&#34;762&#34; data-height=&#34;608&#34; src=&#34;../../../../images/events-model.png&#34;&gt;
                            &lt;/div&gt;
                            &lt;figcaption class=&#34;imageCaption&#34;&gt;Knative eventing constructs&lt;/figcaption&gt;
                          &lt;/figure&gt;
                          &lt;ul class=&#34;postList&#34;&gt;
                            &lt;li name=&#34;dc26&#34; id=&#34;dc26&#34; class=&#34;graf graf--li graf-after--figure&#34;&gt;
                              &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Event Sources&lt;/strong&gt; — represents the producer of events (e.g. GitHub)&lt;/li&gt;
                              &lt;li name=&#34;4cc7&#34; id=&#34;4cc7&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                                &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Event Types&lt;/strong&gt; — describes the types of events supported by the different event sources (e.g. Webhook for the above mentioned GitHub source)&lt;/li&gt;
                                &lt;li name=&#34;dc2c&#34; id=&#34;dc2c&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                                  &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Event Consumers&lt;/strong&gt; — represents the target of your action (i.e. any route defined by Knative)&lt;/li&gt;
                                  &lt;li name=&#34;2882&#34; id=&#34;2882&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
                                    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Event Feeds&lt;/strong&gt; — is the binding or configuration connecting the event types to actions&lt;/li&gt;
                                  &lt;/ul&gt;
                                  &lt;p name=&#34;638e&#34; id=&#34;638e&#34; class=&#34;graf graf--p graf-after--li&#34;&gt;The functional implementation of the Knative object model means that Knative is both easy to start with, but capable enough to address more advanced use cases as the complexity of your solutions increases.&lt;/p&gt;
                                  &lt;h3 name=&#34;e2f4&#34; id=&#34;e2f4&#34; class=&#34;graf graf--h3 graf-after--p&#34;&gt;Summary&lt;/h3&gt;
                                  &lt;p name=&#34;5231&#34; id=&#34;5231&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;I hope this introduction gave you an understanding of the value of Knative. And how the Knative objects streamline development on Kubernetes, regardless if you work on applications or functions.&lt;/p&gt;
                                  &lt;p name=&#34;ecf2&#34; id=&#34;ecf2&#34; class=&#34;graf graf--p graf-after--p graf--trailing&#34;&gt;Over the next few weeks I will be covering each one of the key Knative usage patterns (image push, blue/green deployment model, source to URL, etc). In each post, I will also provide a sample code to illustrate that pattern and allow you to reproduce them on Knative. I’m super excited to share Knative with you, and I hope you come back to find out more.&lt;/p&gt;
                                &lt;/div&gt;
                              &lt;/div&gt;
                            &lt;/section&gt;
                          &lt;/section&gt;
                          &lt;footer&gt;
                            &lt;p&gt;By &lt;a href=&#34;https://medium.com/@mchmarny_google&#34; class=&#34;p-author h-card&#34;&gt;Mark Chmarny&lt;/a&gt; on &lt;a href=&#34;https://medium.com/p/4e6d8604972&#34;&gt;
                              &lt;time class=&#34;dt-published&#34; datetime=&#34;2018-11-14T02:20:46.348Z&#34;&gt;November 14, 2018&lt;/time&gt;
                            &lt;/a&gt;.&lt;/p&gt;
                            &lt;p&gt;
                              &lt;a href=&#34;https://medium.com/@mchmarny_google/build-deploy-manage-modern-serverless-workloads-using-knative-on-kubernetes-4e6d8604972&#34; class=&#34;p-canonical&#34;&gt;Canonical link&lt;/a&gt;
                            &lt;/p&gt;
                            &lt;p&gt;Exported from &lt;a href=&#34;https://medium.com&#34;&gt;Medium&lt;/a&gt; on January 8, 2019.&lt;/p&gt;
                          &lt;/footer&gt;
                        &lt;/article&gt;
                      &lt;/body&gt;
                      &lt;/html&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: How to set up a local Knative environment with KinD and without DNS headaches</title>
      <link>https://knative.dev/blog/1/01/01/how-to-set-up-a-local-knative-environment-with-kind-and-without-dns-headaches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://knative.dev/blog/1/01/01/how-to-set-up-a-local-knative-environment-with-kind-and-without-dns-headaches/</guid>
      <description>
        
        
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Reviewer&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Approval&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@retgits&lt;/td&gt;
&lt;td&gt;2020-06-03&lt;/td&gt;
&lt;td&gt;:+1:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;!-- Your Github handle here --&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Knative builds on Kubernetes to abstract away complexity for developers, and enables them to focus on delivering value to their business. The complex (and sometimes boring) parts of building apps to run on Kubernetes are managed by Knative. In this post, we will focus on setting up a lightweight environment to help you to develop modern apps faster using Knative.&lt;/p&gt;
&lt;h2 id=&#34;step-1-setting-up-your-kubernetes-deployment-using-kind&#34;&gt;Step 1: Setting up your Kubernetes deployment using KinD&lt;/h2&gt;
&lt;p&gt;There are many options for creating a Kubernetes cluster on your local machine. However, since we are running containers in the Kubernetes cluster anyway, let’s also use containers for the cluster itself. Kubernetes IN Docker, or &lt;em&gt;KinD&lt;/em&gt; for short, enables developers to spin up a Kubernetes cluster where each cluster node is a container.&lt;/p&gt;
&lt;p&gt;You can install KinD on your machine by running the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;uname&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;-amd64
chmod +x ./kind
mv ./kind /some-dir-in-your-PATH/kind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create a Kubernetes cluster using KinD, and expose the ports the ingress gateway to listen on the host. To do this, you can pass in a file with the following cluster configuration parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &amp;gt; clusterconfig.yaml &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: Cluster
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: kind.sigs.k8s.io/v1alpha3
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;nodes:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;- role: control-plane
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  extraPortMappings:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;	## expose port 31380 of the node to port 80 on the host
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - containerPort: 31080
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    hostPort: 80
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;	## expose port 31443 of the node to port 443 on the host
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - containerPort: 31443
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    hostPort: 443
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The values for the container ports are randomly chosen, and are used later on to configure a NodePort service with these values.
The values for the host ports are where you&amp;rsquo;ll send cURL requests to as you deploy applications to the cluster.&lt;/p&gt;
&lt;p&gt;After the cluster configuration file has been created, you can create a cluster. Your &lt;code&gt;kubeconfig&lt;/code&gt; will automatically be updated, and the default cluster will be set to your new cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kind create cluster --name knative --config clusterconfig.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Creating cluster &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;knative&amp;#34;&lt;/span&gt; ...
 ✓ Ensuring node image &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;kindest/node:v1.18.2&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 🖼
 ✓ Preparing nodes 📦
 ✓ Writing configuration 📜
 ✓ Starting control-plane 🕹️
 ✓ Installing CNI 🔌
 ✓ Installing StorageClass 💾
Set kubectl context to &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kind-knative&amp;#34;&lt;/span&gt;
You can now use your cluster with:

kubectl cluster-info --context kind-knative

Have a nice day! 👋
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-install-knative-serving&#34;&gt;Step 2: Install Knative Serving&lt;/h2&gt;
&lt;p&gt;Now that the cluster is running, you can add Knative components using the Knative CRDs. At the time of writing, the latest available version is 0.15.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply --filename https://github.com/knative/serving/releases/download/v0.15.0/serving-crds.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;customresourcedefinition.apiextensions.k8s.io/certificates.networking.internal.knative.dev created
customresourcedefinition.apiextensions.k8s.io/configurations.serving.knative.dev created
customresourcedefinition.apiextensions.k8s.io/ingresses.networking.internal.knative.dev created
customresourcedefinition.apiextensions.k8s.io/metrics.autoscaling.internal.knative.dev created
customresourcedefinition.apiextensions.k8s.io/podautoscalers.autoscaling.internal.knative.dev created
customresourcedefinition.apiextensions.k8s.io/revisions.serving.knative.dev created
customresourcedefinition.apiextensions.k8s.io/routes.serving.knative.dev created
customresourcedefinition.apiextensions.k8s.io/serverlessservices.networking.internal.knative.dev created
customresourcedefinition.apiextensions.k8s.io/services.serving.knative.dev created
customresourcedefinition.apiextensions.k8s.io/images.caching.internal.knative.dev created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the CRDs, the core components are next to be installed on your cluster. For brevity, the unchanged components are removed from the response.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply --filename https://github.com/knative/serving/releases/download/v0.15.0/serving-core.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;namespace/knative-serving created
serviceaccount/controller created
clusterrole.rbac.authorization.k8s.io/knative-serving-admin created
clusterrolebinding.rbac.authorization.k8s.io/knative-serving-controller-admin created
image.caching.internal.knative.dev/queue-proxy created
configmap/config-autoscaler created
configmap/config-defaults created
configmap/config-deployment created
configmap/config-domain created
configmap/config-gc created
configmap/config-leader-election created
configmap/config-logging created
configmap/config-network created
configmap/config-observability created
configmap/config-tracing created
horizontalpodautoscaler.autoscaling/activator created
deployment.apps/activator created
service/activator-service created
deployment.apps/autoscaler created
service/autoscaler created
deployment.apps/controller created
service/controller created
deployment.apps/webhook created
service/webhook created
clusterrole.rbac.authorization.k8s.io/knative-serving-addressable-resolver created
clusterrole.rbac.authorization.k8s.io/knative-serving-namespaced-admin created
clusterrole.rbac.authorization.k8s.io/knative-serving-namespaced-edit created
clusterrole.rbac.authorization.k8s.io/knative-serving-namespaced-view created
clusterrole.rbac.authorization.k8s.io/knative-serving-core created
clusterrole.rbac.authorization.k8s.io/knative-serving-podspecable-binding created
validatingwebhookconfiguration.admissionregistration.k8s.io/config.webhook.serving.knative.dev created
mutatingwebhookconfiguration.admissionregistration.k8s.io/webhook.serving.knative.dev created
validatingwebhookconfiguration.admissionregistration.k8s.io/validation.webhook.serving.knative.dev created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-set-up-networking-using-kourier&#34;&gt;Step 3: Set up networking using Kourier&lt;/h2&gt;
&lt;p&gt;Next, choose a networking layer. This example uses Kourier. Kourier is the option with the lowest resource requirements, and connects to Envoy and the Knative Ingress CRDs directly.&lt;/p&gt;
&lt;p&gt;To install Kourier and make it available as a service leveraging the node ports, you’ll need to download the YAML file first and make a few changes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Lo kourier.yaml https://github.com/knative-sandbox/net-kourier/releases/download/v0.15.0/kourier.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the Kourier service is set to be of type &lt;code&gt;LoadBalancer&lt;/code&gt;. On local machines, this type doesn’t work, so you’ll have to change the type to &lt;code&gt;NodePort&lt;/code&gt; and add &lt;code&gt;nodePort&lt;/code&gt; elements to the two listed ports.&lt;/p&gt;
&lt;p&gt;The complete Service portion (which runs from line 75 to line 94 in the document), should be replaced with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Service&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kourier&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kourier-system&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;networking.knative.dev/ingress-provider&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kourier&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;http2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TCP&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodePort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31080&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;443&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TCP&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8443&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodePort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31443&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3scale-kourier-gateway&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NodePort&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To install the Kourier controller, enter the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply --filename kourier.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;namespace/kourier-system created
configmap/config-logging created
configmap/config-observability created
configmap/config-leader-election created
service/kourier created
deployment.apps/3scale-kourier-gateway created
deployment.apps/3scale-kourier-control created
clusterrole.rbac.authorization.k8s.io/3scale-kourier created
serviceaccount/3scale-kourier created
clusterrolebinding.rbac.authorization.k8s.io/3scale-kourier created
service/kourier-internal created
service/kourier-control created
configmap/kourier-bootstrap created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you will need to set Kourier as the default networking layer for Knative Serving. You can do this by entering the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl patch configmap/config-network &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --namespace knative-serving &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --type merge &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --patch &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;ingress.class&amp;#34;:&amp;#34;kourier.ingress.networking.knative.dev&amp;#34;}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to validate that the patch command was successful, run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe configmap/config-network --namespace knative-serving
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;... &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;abbreviated &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; readability&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
ingress.class:
----
kourier.ingress.networking.knative.dev
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get the same experience that you would when using a cluster that has DNS names set up, you can add a “magic” DNS provider.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sslip.io&lt;/em&gt; provides a wildcard DNS setup that will automatically resolve to the IP address you put in front of sslip.io.&lt;/p&gt;
&lt;p&gt;To patch the domain configuration for Knative Serving using sslip.io, enter the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl patch configmap/config-domain &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --namespace knative-serving &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --type merge &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --patch &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;127.0.0.1.sslip.io&amp;#34;:&amp;#34;&amp;#34;}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to validate that the patch command was successful, run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe configmap/config-domain --namespace knative-serving
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;... &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;abbreviated &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; readability&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Data&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;====&lt;/span&gt;
127.0.0.1.sslip.io:
----
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By now, all pods in the knative-serving and kourier-system namespaces should be running.
You can check this by entering the commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods --namespace knative-serving
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME                          READY   STATUS    RESTARTS   AGE
activator-6d9f95b7f8-w6m68    1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          12m
autoscaler-597fd8d69d-gmh9s   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          12m
controller-7479cc984d-492fm   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          12m
webhook-bf465f954-4c7wq       1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          12m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods --namespace kourier-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME                                      READY   STATUS    RESTARTS   AGE
3scale-kourier-control-699cbc695-ztswk    1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m
3scale-kourier-gateway-7df98bb5db-5bw79   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To validate your cluster gateway is in the right state and using the right ports, enter the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl --namespace kourier-system get service kourier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME      TYPE       CLUSTER-IP      EXTERNAL-IP   PORT&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;                      AGE
kourier   NodePort   10.98.179.178   &amp;lt;none&amp;gt;        80:31080/TCP,443:31443/TCP   87m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                                                      NAMES
d53c275d7461        kindest/node:v1.18.2   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; hours ago         Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; hours          127.0.0.1:49350-&amp;gt;6443/tcp, 0.0.0.0:80-&amp;gt;31080/tcp, 0.0.0.0:443-&amp;gt;31443/tcp   knative-control-plane
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The ports, and how they’re tied to the host, should be the same as you’ve defined in the clusterconfig file. For example, port 31380 in the cluster is exposed as port 80.&lt;/p&gt;
&lt;h2 id=&#34;step-4-deploying-your-first-app&#34;&gt;Step 4: Deploying your first app&lt;/h2&gt;
&lt;p&gt;Now that the cluster, Knative, and the networking components are ready, you can deploy an app.
The straightforward &lt;a href=&#34;https://knative.dev/docs/eventing/samples/helloworld/helloworld-go/&#34;&gt;Go app&lt;/a&gt; that already exists, is an excellent example app to deploy.
The first step is to create a yaml file with the hello world service definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &amp;gt; service.yaml &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: serving.knative.dev/v1 # Current version of Knative
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: Service
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: helloworld-go # The name of the app
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: default # The namespace the app will use
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        - image: gcr.io/knative-samples/helloworld-go # The URL to the image of the app
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;          env:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            - name: TARGET # The environment variable printed out by the sample app
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;              value: &amp;#34;Hello Knative Serving is up and running with Kourier!!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To deploy your app to Knative, enter the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply --filename service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To validate your deployment, you can use &lt;code&gt;kubectl get ksvc&lt;/code&gt;.
&lt;strong&gt;NOTE:&lt;/strong&gt; While your cluster is configuring the components that make up the service, the output of the &lt;code&gt;kubectl get ksvc&lt;/code&gt; command will show that the revision is missing. The status &lt;strong&gt;ready&lt;/strong&gt; eventually changes to &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get ksvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME            URL                                             LATESTCREATED         LATESTREADY   READY     REASON
helloworld-go   http://helloworld-go.default.127.0.0.1.sslip.io   helloworld-go-fqqs6                 Unknown   RevisionMissing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME            URL                                             LATESTCREATED         LATESTREADY           READY   REASON
helloworld-go   http://helloworld-go.default.127.0.0.1.sslip.io   helloworld-go-fqqs6   helloworld-go-fqqs6   True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final step is to test your application, by checking that the code returns what you expect. You can do this by sending a cURL request to the URL listed above.&lt;/p&gt;
&lt;p&gt;Because this example mapped port 80 of the host to be forwarded to the cluster and set the DNS, you can use the exact URL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -v http://helloworld-go.default.127.0.0.1.sslip.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Hello Knative Serving is up and running with Kourier!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-5-cleaning-up&#34;&gt;Step 5: Cleaning up&lt;/h2&gt;
&lt;p&gt;You can stop your cluster and remove all the resources you’ve created by entering the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kind delete cluster --name knative
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;about-the-author&#34;&gt;About the author&lt;/h2&gt;
&lt;p&gt;As a Product Manager, Leon is very passionate and outspoken when it comes to serverless and container technologies. He believes that &amp;ldquo;devs wanna dev&amp;rdquo; and that drives his passion to help build better products. He enjoys writing code, speaking at conferences and meetups, and blogging about that.
In his personal life, he’s on a mission to taste cheesecake in every city he visits (suggestions are welcome @retgits).&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
